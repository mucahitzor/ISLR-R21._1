default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
skimr::skim(default)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
library(GGally)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
skimr::skim(default)
GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
# gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Top: The aanual incomes and montly credit card balances of a number of individuals. The individuals who defaulted on their credit card payments are shown in orange, and those who did not are shown in blue. Center: boxplots of balances as a function of default status. Bottom: boxplots of income as a functino of default status.
# Chunk 6
default %>%
count(default) %>%
mutate(port = n/sum(n))
# default rate is 3%
# Chunk 7
default %>%
group_by(student,default) %>%
summarise(count = n()) %>%
mutate(port = count/sum(count))
# student are 2 times more likely to default
# Chunk 8
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
print() %>%
lm(default~balance,.) %>%
summary()
# Chunk 9
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
lm(default~balance,.) -> lm_res
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
ggplot() + aes(x = balance, y = default) + geom_point(shape = 4, color = "brown4") +
geom_abline(intercept = lm_res$coefficients[1], slope = lm_res$coefficients[2], color = "blue") + scale_y_continuous(expand = c(0,0.25), breaks = seq(-0.2,1,by=0.2) )
d %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(pi_hat = count/sum(count))
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = factor(class), estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
set.seed(12)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
warnings()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F) +  scale_colour_viridis_d()
dev.off()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F) +  scale_colour_viridis_d()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Top: The aanual incomes and montly credit card balances of a number of individuals. The individuals who defaulted on their credit card payments are shown in orange, and those who did not are shown in blue. Center: boxplots of balances as a function of default status. Bottom: boxplots of income as a functino of default status.
library(discrim)
d %>% mutate(class = factor(class)) -> d
discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS") -> lda_spec
lda_recipe <- recipe(class~x,data =d)
workflow() %>%
add_model(lda_spec) %>%
add_recipe(lda_recipe) -> lda_workflow
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class) %>%
autoplot()
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class) %>%
autoplot(type = "heatmap")
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class) %>%
autoplot(type = "heatmap")
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Top: The aanual incomes and montly credit card balances of a number of individuals. The individuals who defaulted on their credit card payments are shown in orange, and those who did not are shown in blue. Center: boxplots of balances as a function of default status. Bottom: boxplots of income as a functino of default status.
# Chunk 6
default %>%
count(default) %>%
mutate(port = n/sum(n))
# default rate is 3%
# Chunk 7
default %>%
group_by(student,default) %>%
summarise(count = n()) %>%
mutate(port = count/sum(count))
# student are 2 times more likely to default
# Chunk 8
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
print() %>%
lm(default~balance,.) %>%
summary()
# Chunk 9
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
lm(default~balance,.) -> lm_res
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
ggplot() + aes(x = balance, y = default) + geom_point(shape = 4, color = "brown4") +
geom_abline(intercept = lm_res$coefficients[1], slope = lm_res$coefficients[2], color = "blue") + scale_y_continuous(expand = c(0,0.25), breaks = seq(-0.2,1,by=0.2) )
# Chunk 10
# initialize model
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") -> log_model
log_model
# Chunk 11
# setup the recipe
default_recipe <- recipe(default ~ balance, data = default)
default_recipe
# Chunk 12
# set up the workflow
workflow() %>%
add_model(log_model) %>%
add_recipe(default_recipe) -> default_workflow
default_workflow
# Chunk 13
## fit model
default_workflow %>%
fit(data = default) %>%
tidy(conf.int = T)
# for the default data, estiamted coefficients of the logistic regression model that predicts the probability of default using balance. A one unit increase in balance is assocaited witnh an increase in the log odds of default by 0.0055 units.
# Chunk 14
default_workflow %>%
fit(data = default) %>%
augment(new_data = default) %>%
ggplot() + aes(x = balance, y = default, color = .pred_class) + geom_point() + scale_color_ipsum()
# Chunk 15
## fit model
default_workflow %>%
fit(data = default) %>%
tidy(conf.int = T)
# for the default data, estiamted coefficients of the logistic regression model that predicts the probability of default using balance. A one unit increase in balance is assocaited witnh an increase in the log odds of default by 0.0055 units.
# Chunk 16
exp(-10.6513 + 0.0055 * 1000) / (1 + exp(-10.6513 + 0.0055 * 1000))
# Chunk 17
exp(-10.6513 + 0.0055 * 2000) / (1 + exp(-10.6513 + 0.0055 * 2000))
# Chunk 18
default_workflow %>%
fit(data=default) %>%
augment(new_data = default) %>% print() %>%
count(.pred_class)
# we classified 142 cases to default
# originally
default %>%
count(default)
# 333 cases are actually default
# Chunk 19
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") -> log_model
default_recipe <- recipe(default ~ student, data = default)
workflow() %>%
add_model(log_model) %>%
add_recipe(default_recipe) -> default_workflow
default_workflow %>%
fit(data = default) %>%
tidy(conf.int = T)
# Chunk 20
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") -> log_model
recipe <- recipe(default ~ balance + income + student, data = default)
workflow() %>%
add_model(log_model) %>%
add_recipe(recipe) -> default_workflow
default_workflow %>%
fit(data = default) %>%
tidy()
# Chunk 21
default_workflow %>%
fit(data = default) %>%
augment(new_data = tibble(income = 40000, balance = 1500, student = c("Yes","No")))
# Chunk 22
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
# Chunk 23
d %>%
group_by(class) %>%
summarise(mean_hat = mean(x), var_hat = sd(x)^2)
# Chunk 24
d %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(pi_hat = count/sum(count))
data %>%
ggplot() + aes(x=x, y=y) + geom_point()
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
#| warning: false
#| error: false
advertising = read_csv("./data/Advertising.csv") %>% as_tibble %>% select(-1)
advertising
# Chunk 3
beta_1_hat_adv = sum((advertising$TV - mean(advertising$TV)) * ((advertising$sales - mean(advertising$sales)))) / sum((advertising$TV - mean(advertising$TV))^2)
beta_1_hat_adv
# Chunk 4
beta_0_hat_adv = mean(advertising$sales) - beta_1_hat_adv * mean(advertising$TV)
beta_0_hat_adv
# Chunk 5
summary(lm(sales ~ TV, data = advertising))
# Chunk 6
y_hat_adv = beta_0_hat_adv + beta_1_hat_adv * advertising$TV
y_hat_adv[1:10]
# Chunk 7
RSS = sum((advertising$sales - y_hat_adv)^2)
RSS
# Chunk 8
#| warning: false
#| error: false
#| fig-cap: For the advertising data, the least squares fit for the regression of sales onto TV. The fit is found by minimizing the sum of squared errors. Each grey line segment represents an error, adn the fit make a comprimise by averaging their squares. In this case a linear fit captures the essence of the relationship, although it is somewhat deficient in the left of the plot
advertising %>%
ggplot() + aes(x=TV, y = sales) +  geom_abline(intercept = beta_0_hat_adv, slope = beta_1_hat_adv, color = "#262B70", size =1.2) +
geom_segment(aes(xend=TV, yend=y_hat_adv), color = "#939393") +
geom_point(color = "#AA1D2E", size =2) + theme_par()
# Chunk 9
seq(-2,2,length.out=100)[1:10]
# Chunk 10
set.seed(11)
x = sample(seq(-2,2,length.out = 100),size = 100, replace = T)
x[1:10]
# Chunk 11
set.seed(11)
y = 2 + 3*x + rnorm(100)
y[1:10]
# Chunk 12
data = tibble(
y = y, x = x
)
data %>%
ggplot() + aes(x=x, y=y) + geom_point()
summary(lm(y ~ x, data = data))
lm(y~x,data) %>%
dwplot(ci = 0.95,dot_args = list(size=2), vline = geom_vline(xintercept = 0, color = "grey50", linetype =2))
lm(y~x,data) %>%
dwplot(ci = 0.95,dot_args = list(size=2), vline = geom_vline(xintercept = 0, color = "grey50", linetype =2))
lm(y~x,data) %>%
dwplot(ci = 0.95,dot_args = list(size=2), vline = geom_vline(xintercept = 0, color = "grey50", linetype =2))
confint(lm(y~x,data))
extrafont::loadfonts(quiet=TRUE)
extrafont::loadfonts()
extrafont::loadfonts(quite = T)
extrafont::loadfonts(quite = TRUE)
extrafont::loadfonts(quiet =  TRUE)
install.packages("showtext")
