lda_recipe <- recipe(class~x,data =d)
workflow() %>%
add_model(lda_spec) %>%
add_recipe(lda_recipe)
workflow() %>%
add_model(lda_spec) %>%
add_recipe(lda_recipe) -> lda_workflow
lda_workflow %>%
fit(data = d)
lda_workflow %>%
fit(data = d) %>%
augment()
lda_workflow %>%
fit(data = d) %>%
augment(newdata=d)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2)) %>%
print(n=40)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2))
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
group_by(class, .pred_class) %>%
summarise(n=n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n = n())
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
group_by(class, .pred_class) %>%
summarise(n=n())
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
group_by(class, .pred_class) %>%
summarise(n=n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n = n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2))
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2))
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n =n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n =n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 >= d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n =n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2)) %>%
group_by(class, pred.class) %>%
summarise(n =n())
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2))
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
group_by(class, .pred_class) %>%
summarise(n=n())
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2))
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2))
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
conf_mat(truth = class, estimate = .pred.class)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
conf_mat(truth = class, estimate = .pred_class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2))
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = ifelse(d_k_c1 > d_k_c2,1,2)) %>%
conf_mat(truth = class, estimate = pred.class)
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = class, estimate = pred.class)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d) %>%
conf_mat(truth = class, estimate = .pred_class)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(pi_hat = count/sum(count))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F) + scale_color_viridis_d()
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F) + scale_color_viridis_d()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
GGally::ggpairs(mapping = aes(color = default), data = default)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
skimr::skim(default)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
library(GGally)
GGally::ggpairs(mapping = aes(color = default), data = default)
GGally::ggpairs(mapping = aes(color = default), data = default)
skimr::skim(default)
GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Chunk 1
suppressPackageStartupMessages({
library(ISLR)
library(tidyverse)
library(ggthemes)
library(sjPlot)
library(corrplot)
library(tidymodels)
library(magrittr)
library(dotwhisker)
library(hrbrthemes)
library(patchwork)
library(GGally)
})
theme_set(theme_ipsum_ps(axis_title_size = 11 , axis_title_just = "c") + theme(axis.line = element_line(color ="black")))
# Chunk 2
default = read_csv("./data/Default.csv")
default %<>%
mutate_if(is.character, ~as.factor(.)) %>%
print()
# Chunk 3
skimr::skim(default)
# Chunk 4
# GGally::ggpairs(mapping = aes(color = default), data = default)
# Chunk 5
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
# gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Top: The aanual incomes and montly credit card balances of a number of individuals. The individuals who defaulted on their credit card payments are shown in orange, and those who did not are shown in blue. Center: boxplots of balances as a function of default status. Bottom: boxplots of income as a functino of default status.
# Chunk 6
default %>%
count(default) %>%
mutate(port = n/sum(n))
# default rate is 3%
# Chunk 7
default %>%
group_by(student,default) %>%
summarise(count = n()) %>%
mutate(port = count/sum(count))
# student are 2 times more likely to default
# Chunk 8
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
print() %>%
lm(default~balance,.) %>%
summary()
# Chunk 9
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
lm(default~balance,.) -> lm_res
default %>%
mutate(default = ifelse(default == "Yes",1,0)) %>%
ggplot() + aes(x = balance, y = default) + geom_point(shape = 4, color = "brown4") +
geom_abline(intercept = lm_res$coefficients[1], slope = lm_res$coefficients[2], color = "blue") + scale_y_continuous(expand = c(0,0.25), breaks = seq(-0.2,1,by=0.2) )
d %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(pi_hat = count/sum(count))
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2))) %>%
conf_mat(truth = factor(class), estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
set.seed(12)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
warnings()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = factor(class),group =factor(class)) + geom_density(show.legend = F)
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F) +  scale_colour_viridis_d()
dev.off()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F) +  scale_colour_viridis_d()
set.seed(12)
a = rnorm(n=20, mean = -1.25, sd =1)
b = rnorm(n=20, mean=1.25, sd =1)
d = rbind(tibble(x = a, class = 1),tibble(x = b, class =2))
d %>% ggplot() + aes(x = x, color = class, group = class) + geom_density(show.legend = F)
default %>%
ggplot() + aes(x = balance, y = income, color = default, shape = default) + geom_point() + scale_color_manual(values = c("#6CA2C9","#BD5E2A")) + scale_shape_manual(values = c(1,3)) -> p1
default %>%
ggplot() + aes(x = default, y = balance, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p2
default %>%
ggplot() + aes(x = default, y = income, fill = default) + geom_boxplot() +
scale_fill_manual(values = c("#6CA2C9","#BD5E2A")) -> p3
# gridExtra::grid.arrange(p1,p2,p3, nrow=1)
gridExtra::grid.arrange(p1,p2,p3, nrow=3)
# Top: The aanual incomes and montly credit card balances of a number of individuals. The individuals who defaulted on their credit card payments are shown in orange, and those who did not are shown in blue. Center: boxplots of balances as a function of default status. Bottom: boxplots of income as a functino of default status.
library(discrim)
d %>% mutate(class = factor(class)) -> d
discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS") -> lda_spec
lda_recipe <- recipe(class~x,data =d)
workflow() %>%
add_model(lda_spec) %>%
add_recipe(lda_recipe) -> lda_workflow
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
lda_workflow %>%
fit(data = d) %>%
augment(new_data=d)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class)
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class) %>%
autoplot()
d %>%
mutate(d_k_c1 = x * (-1.58/0.751) - (-1.58^2/(2*0.751)) + log(0.5),
d_k_c2 = x * (1.35 / 0.781) - (1.35^2/(2*0.781)) + log(0.5)) %>%
mutate(pred.class = factor(ifelse(d_k_c1 > d_k_c2,1,2)), class = factor(class)) %>%
conf_mat(truth = class, estimate = pred.class) %>%
autoplot(type = "heatmap")
